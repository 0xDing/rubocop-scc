
AllCops:
  DisabledByDefault: true
  TargetRubyVersion: 2.5

Bundler/DuplicatedGem:
  Enabled: true

Bundler/InsecureProtocolSource:
  Enabled: true

Bundler/OrderedGems:
  Enabled: true

Layout/AccessModifierIndentation:
  Enabled: true

Layout/BlockEndNewline:
  Enabled: true

Layout/EndOfLine:
  Enabled: true

Layout/AlignHash:
  Enabled: true

Layout/IndentationWidth:
  Enabled: true

Layout/ElseAlignment:
  Enabled: true

Layout/EmptyLineAfterMagicComment:
  Enabled: true

Layout/EmptyLineBetweenDefs:
  Enabled: true

Layout/EmptyLines:
  Enabled: true

Layout/EmptyLinesAroundAccessModifier:
  Enabled: true

Layout/EmptyLinesAroundBeginBody:
  Enabled: true

Layout/EmptyLinesAroundBlockBody:
  Enabled: true

Layout/EmptyLinesAroundExceptionHandlingKeywords:
  Enabled: true

Layout/InitialIndentation:
  Enabled: true

Layout/RescueEnsureAlignment:
  Enabled: true

Layout/AlignParameters:
  Enabled: true

Layout/DotPosition:
  Enabled: true

Layout/SpaceAfterColon:
  Enabled: true

Layout/SpaceAfterComma:
  Enabled: true

Layout/SpaceAfterMethodName:
  Enabled: true

Layout/SpaceAfterNot:
  Enabled: true

Layout/SpaceAfterSemicolon:
  Enabled: true

Layout/SpaceAroundBlockParameters:
  Enabled: true

Layout/SpaceAroundEqualsInParameterDefault:
  Enabled: true

Layout/SpaceBeforeBlockBraces:
  Enabled: true

Layout/SpaceInsideArrayLiteralBrackets:
  Enabled: true
  EnforcedStyle: no_space

Layout/SpaceInsideArrayPercentLiteral:
  Enabled: true

Layout/SpaceInsideBlockBraces:
  Enabled: true

Layout/SpaceInsideParens:
  Enabled: true

Layout/SpaceInsideRangeLiteral:
  Enabled: true

Layout/SpaceInsideReferenceBrackets:
  Enabled: true

Layout/Tab:
  Enabled: true

Layout/TrailingBlankLines:
  Enabled: true

Layout/TrailingWhitespace:
  Enabled: true

Layout/BlockAlignment:
  Enabled: true

Lint/CircularArgumentReference:
  Enabled: true

Layout/ConditionPosition:
  Enabled: true

Lint/Debugger:
  Enabled: true

Layout/DefEndAlignment:
  Enabled: true

Lint/DeprecatedClassMethods:
  Enabled: true

Lint/DuplicateMethods:
  Enabled: true

Lint/DuplicatedKey:
  Enabled: true

Lint/EachWithObjectArgument:
  Enabled: true

Lint/ElseLayout:
  Enabled: true

Lint/EmptyEnsure:
  Enabled: true

Lint/EmptyInterpolation:
  Enabled: true

Layout/EndAlignment:
  Enabled: false

Lint/EndInMethod:
  Enabled: true

Lint/EnsureReturn:
  Enabled: true

Lint/AssignmentInCondition:
  Enabled: true

Lint/AmbiguousRegexpLiteral:
  Enabled: true

Lint/BooleanSymbol:
  Enabled: true

Lint/FloatOutOfRange:
  Enabled: true

Lint/SafeNavigationChain:
  Enabled: true

Lint/FormatParameterMismatch:
  Enabled: true

Lint/LiteralAsCondition:
  Enabled: true

Lint/LiteralInInterpolation:
  Enabled: true

Lint/Loop:
  Enabled: true

Lint/NextWithoutAccumulator:
  Enabled: true

Lint/RandOne:
  Enabled: true

Lint/RequireParentheses:
  Enabled: true

Lint/RescueException:
  Enabled: true

Lint/StringConversionInInterpolation:
  Enabled: true

Lint/UnderscorePrefixedVariableName:
  Enabled: true

Lint/UnneededSplatExpansion:
  Enabled: true

Lint/UnreachableCode:
  Enabled: true

Lint/UselessComparison:
  Enabled: true

Lint/UselessSetterCall:
  Enabled: true

Lint/Void:
  Enabled: true

Metrics/AbcSize:
  Enabled: false

Metrics/BlockLength:
  Enabled: false

Metrics/BlockNesting:
  Enabled: false

Metrics/ClassLength:
  Enabled: true
  Max: 300

Metrics/CyclomaticComplexity:
  Enabled: false

Metrics/LineLength:
  Enabled: false

Metrics/MethodLength:
  Enabled: true
  Max: 50

Metrics/ModuleLength:
  Enabled: false

Metrics/ParameterLists:
  Enabled: false

Metrics/PerceivedComplexity:
  Enabled: false

Naming/AsciiIdentifiers:
  Enabled: true

Naming/ClassAndModuleCamelCase:
  Enabled: true

Naming/FileName:
  Enabled: true

Naming/HeredocDelimiterCase:
  Enabled: true

Naming/ConstantName:
  Enabled: true

Naming/AccessorMethodName:
  Enabled: true

Naming/MethodName:
  Enabled: true

Naming/PredicateName:
  Enabled: true

Naming/VariableNumber:
  Enabled: true

Performance/CaseWhenSplat:
  Enabled: false

Performance/Casecmp:
  Enabled: true

Performance/CompareWithBlock:
  Enabled: true

Performance/Count:
  Enabled: true

Performance/Detect:
  Enabled: true

Performance/DoubleStartEndWith:
  Enabled: true

Performance/EndWith:
  Enabled: true

Performance/FlatMap:
  Enabled: true

Performance/LstripRstrip:
  Enabled: true

Performance/RangeInclude:
  Enabled: false

Performance/RedundantMatch:
  Enabled: false

Performance/RedundantMerge:
  Enabled: true
  MaxKeyValuePairs: 1

Performance/RedundantSortBy:
  Enabled: true

Performance/ReverseEach:
  Enabled: true

Performance/Sample:
  Enabled: true

Performance/UnfreezeString:
  Enabled: true

Performance/TimesMap:
  Enabled: true

Performance/UriDefaultParser:
  Enabled: true

Performance/Size:
  Enabled: true

Performance/StartWith:
  Enabled: true

Security/Eval:
  Enabled: true

Style/ArrayJoin:
  Enabled: true

Style/AndOr:
  Description: Use &&/|| instead of and/or.
  StyleGuide: https://github.com/bbatsov/ruby-style-guide#no-and-or-or
  Enabled: true
  EnforcedStyle: always
  SupportedStyles:
  - always
  - conditionals

Style/BeginBlock:
  Enabled: true

Style/BlockComments:
  Enabled: true

Style/CaseEquality:
  Enabled: true

Style/CharacterLiteral:
  Enabled: true

Style/ClassMethods:
  Enabled: true

Style/Copyright:
  Enabled: false

Style/DefWithParentheses:
  Enabled: true

Style/EndBlock:
  Enabled: true

Style/FlipFlop:
  Enabled: true

Style/For:
  Enabled: true

Style/FrozenStringLiteralComment:
  Enabled: true

Style/HashSyntax:
  Enabled: true
  EnforcedStyle: ruby19

Style/LambdaCall:
  Enabled: true

Style/MethodCallWithoutArgsParentheses:
  Enabled: true

Style/MethodDefParentheses:
  Enabled: true

Style/MultilineIfThen:
  Enabled: true

Style/NilComparison:
  Enabled: true

Style/Not:
  Enabled: true

Style/OneLineConditional:
  Enabled: true

Style/StabbyLambdaParentheses:
  Enabled: true

Style/StringLiterals:
  Enabled: true

Style/DateTime:
  Enabled: true

Style/Alias:
  Enabled: true

Style/AndOr:
  Enabled: true

Style/AsciiComments:
  Enabled: false

Style/Attr:
  Enabled: true

Style/AutoResourceCleanup:
  Enabled: true

Style/BarePercentLiterals:
  Enabled: true

Style/BlockDelimiters:
  Enabled: true
  EnforcedStyle: line_count_based
  SupportedStyles:
    # The `line_count_based` style enforces braces around single line blocks and
    # do..end around multi-line blocks.
    - line_count_based
    # The `semantic` style enforces braces around functional blocks, where the
    # primary purpose of the block is to return a value and do..end for
    # procedural blocks, where the primary purpose of the block is its
    # side-effects.
    #
    # This looks at the usage of a block's method to determine its type (e.g. is
    # the result of a `map` assigned to a variable or passed to another
    # method) but exceptions are permitted in the `ProceduralMethods`,
    # `FunctionalMethods` and `IgnoredMethods` sections below.
    - semantic
    # The `braces_for_chaining` style enforces braces around single line blocks
    # and do..end around multi-line blocks, except for multi-line blocks whose
    # return value is being chained with another method (in which case braces
    # are enforced).
    - braces_for_chaining
  ProceduralMethods:
    # Methods that are known to be procedural in nature but look functional from
    # their usage, e.g.
    #
    #   time = Benchmark.realtime do
    #     foo.bar
    #   end
    #
    # Here, the return value of the block is discarded but the return value of
    # `Benchmark.realtime` is used.
    - benchmark
    - bm
    - bmbm
    - create
    - each_with_object
    - measure
    - new
    - realtime
    - tap
    - with_object
  FunctionalMethods:
    # Methods that are known to be functional in nature but look procedural from
    # their usage, e.g.
    #
    #   let(:foo) { Foo.new }
    #
    # Here, the return value of `Foo.new` is used to define a `foo` helper but
    # doesn't appear to be used from the return value of `let`.
    - let
    - let!
    - subject
    - watch
  IgnoredMethods:
    # Methods that can be either procedural or functional and cannot be
    # categorised from their usage alone, e.g.
    #
    #   foo = lambda do |x|
    #     puts "Hello, #{x}"
    #   end
    #
    #   foo = lambda do |x|
    #     x * 100
    #   end
    #
    # Here, it is impossible to tell from the return value of `lambda` whether
    # the inner block's return value is significant.
    - lambda
    - proc
    - it

Style/BracesAroundHashParameters:
  Enabled: true

Style/ClassCheck:
  Enabled: true

Style/ClassVars:
  Enabled: true

Style/ColonMethodCall:
  Enabled: true

Style/ColonMethodDefinition:
  Enabled: true

Style/CommandLiteral:
  Enabled: true

Style/CommentAnnotation:
  Enabled: true

Style/Dir:
  Enabled: true

Style/DoubleNegation:
  Enabled: true

Style/EachForSimpleLoop:
  Enabled: true

Style/EachWithObject:
  Enabled: true

Style/EmptyBlockParameter:
  Enabled: true

Style/EmptyElse:
  Enabled: true

Style/EmptyLambdaParameter:
  Enabled: true

Style/EmptyMethod:
  Enabled: true

Style/Encoding:
  Enabled: true

Style/EvenOdd:
  Enabled: true

Style/GuardClause:
  Enabled: false

Style/IfInsideElse:
  Enabled: true

Style/IfUnlessModifier:
  Enabled: true

Style/IfUnlessModifierOfIfUnless:
  Enabled: true

Style/IfWithSemicolon:
  Enabled: true

Style/ImplicitRuntimeError:
  Enabled: true

Style/InfiniteLoop:
  Enabled: true

Style/InlineComment:
  Enabled: true

Style/MethodMissing:
  Enabled: true

Style/MinMax:
  Enabled: true

Style/NestedModifier:
  Enabled: true

Style/NestedParenthesizedCalls:
  Enabled: true

Style/NonNilCheck:
  Enabled: true

Style/NumericLiteralPrefix:
  Enabled: true

Style/NumericPredicate:
  Enabled: true

Style/OrAssignment:
  Enabled: true

Style/PreferredHashMethods:
  Enabled: true

Style/Proc:
  Enabled: true

Style/RaiseArgs:
  Enabled: true
  EnforcedStyle: compact

Style/RandomWithOffset:
  Enabled: true

Style/RedundantConditional:
  Enabled: true

Style/RedundantParentheses:
  Enabled: true

Style/ReturnNil:
  Enabled: true

Style/Semicolon:
  Enabled: true

Style/StderrPuts:
  Enabled: true

Style/StringHashKeys:
  Enabled: true

Style/StringLiteralsInInterpolation:
  Enabled: true

Style/SymbolArray:
  Enabled: true

Style/SymbolLiteral:
  Enabled: true

Style/SymbolProc:
  Enabled: true

Style/WhenThen:
  Enabled: true

Style/WhileUntilModifier:
  Enabled: true

Style/WordArray:
  Enabled: true

Style/YodaCondition:
  Enabled: true
  EnforcedStyle: equality_operators_only

Security/JSONLoad:
  Enabled: true

ZeroLengthPredicate:
  Enabled: true

Gemspec/DuplicatedAssignment:
  Enabled: true

Gemspec/OrderedDependencies:
  Enabled: true
